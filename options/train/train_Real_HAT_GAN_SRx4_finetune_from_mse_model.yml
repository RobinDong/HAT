# general settings
name: train_Real_HAT_GAN_SRx4_finetune_from_mse_model
model_type: RealHATGANModel
scale: 2
num_gpu: auto
manual_seed: 0

# ----------------- options for synthesizing training data in RealESRGANModel ----------------- #
# USM the ground-truth
l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

# the first degradation process
resize_prob: [0.2, 0.7, 0.1]  # up, down, keep
resize_range: [0.15, 1.5]
gaussian_noise_prob: 0.5
noise_range: [1, 30]
poisson_scale_range: [0.05, 3]
gray_noise_prob: 0.4
jpeg_range: [30, 95]

# the second degradation process
second_blur_prob: 0.8
resize_prob2: [0.3, 0.4, 0.3]  # up, down, keep
resize_range2: [0.3, 1.2]
gaussian_noise_prob2: 0.5
noise_range2: [1, 25]
poisson_scale_range2: [0.05, 2.5]
gray_noise_prob2: 0.4
jpeg_range2: [30, 95]

gt_size: 128
queue_size: 180

# dataset and data loader settings
datasets:
  train:
    name: Bird_UGC
    type: RealESRGANDataset
    dataroot_gt: /data/bird_ugc/train # Refer to Real-ESRGAN for OST dataset. Only DF2K is OK.
    meta_info_file: hat/data/meta_info/meta_info_bird_ugc.txt
    io_backend:
      type: disk

    blur_kernel_size: 21
    kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob: 0.1
    blur_sigma: [0.2, 3]
    betag_range: [0.5, 4]
    betap_range: [1, 2]

    blur_kernel_size2: 21
    kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob2: 0.1
    blur_sigma2: [0.2, 1.5]
    betag_range2: [0.5, 4]
    betap_range2: [1, 2]

    final_sinc_prob: 0.8

    gt_size: 128
    use_hflip: True
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 16
    batch_size_per_gpu: 6
    dataset_enlarge_ratio: 1
    prefetch_mode: cuda
    pin_memory: true

  # Uncomment these for validation
  # val:
  #   name: validation
  #   type: SingleImageDataset
  #   dataroot_lq: datasets/RealSRSet+5images
  #   io_backend:
  #     type: disk
  val_1:
    name: Set5
    type: PairedImageDataset
    dataroot_gt: /data/Set5/GTmod12
    dataroot_lq: /data/Set5/LRbicx2
    io_backend:
      type: disk

  val_2:
    name: Set14
    type: PairedImageDataset
    dataroot_gt: /data/Set14/GTmod12
    dataroot_lq: /data/Set14/LRbicx2
    io_backend:
      type: disk

  val_3:
    name: BSD100
    type: PairedImageDataset
    dataroot_gt: /data/BSD100/BSD100_HR
    dataroot_lq: /data/BSD100/BSD100_LR_x2
    io_backend:
      type: disk

  val_4:
    name: BirdUGC
    type: PairedImageDataset
    dataroot_gt: /data/bird_ugc/val_lrx2
    dataroot_lq: /data/bird_ugc/val_lrx4
    io_backend:
      type: disk

# network structures
network_g:
  type: HAT
  upscale: 2
  in_chans: 3
  img_size: 64
  window_size: 16
  compress_ratio: 3
  squeeze_factor: 30
  conv_scale: 0.01
  overlap_ratio: 0.5
  img_range: 1.
  depths: [6, 6, 6, 6, 6, 6]
  embed_dim: 180
  num_heads: [6, 6, 6, 6, 6, 6]
  mlp_ratio: 2
  upsampler: 'pixelshuffle'
  resi_connection: '1conv'

network_d:
  type: UNetDiscriminatorSN
  num_in_ch: 3
  num_feat: 64
  skip_connection: True

# path
path:
  # use the pre-trained Real-ESRNet model
  # pretrain_network_g: /home/robin/HAT_SRx4_ImageNet-pretrain.pth # train the MSE-based model 'Real_HAT' first.
  # pretrain_network_g: /home/robin/net_g_20000_PSNR_27.7_.pth
  # pretrain_network_g: /home/robin/HAT_SRx2_ImageNet-pretrain.pth
  pretrain_network_g: /home/robin/tmp/net_g_170000.pth
  pretrain_network_d: /home/robin/tmp/net_d_250000.pth
  param_key_g: params_ema
  strict_load_g: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-5
    weight_decay: 0
    betas: [0.9, 0.99]
  optim_d:
    type: Adam
    lr: !!float 1e-5
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [125000, 200000, 225000, 240000]
    gamma: 0.5

  total_iter: 250000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 0.5
    reduction: mean
  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      # before relu
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  # gan loss
  gan_opt:
    type: GANLoss
    gan_type: vanilla
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1

  net_d_iters: 1
  net_d_init_iters: 0

# Uncomment these for validation
# validation settings
val:
  val_freq: !!float 1e4
  save_img: True

  metrics:
    psnr: # metric name
      type: calculate_psnr
      crop_border: 2
      test_y_channel: true
      better: higher
    ssim:
      type: calculate_ssim
      crop_border: 2
      test_y_channel: true
      better: higher  # the higher, the better. Default: higher

# logging settings
logger:
  print_freq: 2000
  save_checkpoint_freq: !!float 1e4
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
